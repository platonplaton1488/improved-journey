import telebot
from telebot import types
import sqlite3
import random
import time
import config
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('doxbot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                score INTEGER DEFAULT 0,
                banned INTEGER DEFAULT 0
              )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS cooldowns (
                user_id INTEGER PRIMARY KEY,
                last_dox_time REAL DEFAULT 0,
                last_shop_time REAL DEFAULT 0
              )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS defs (
                user_id INTEGER PRIMARY KEY,
                purchased INTEGER DEFAULT 0,
                last_def_time REAL DEFAULT 0
              )''')

conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)', 
                  (user_id, username, full_name))
    conn.commit()
    
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–∫—Å–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /dox —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

def check_subscription(user_id):
    try:
        status = bot.get_chat_member(config.ID_CHANNEL, user_id).status
        return status in ['member', 'administrator', 'creator']
    except Exception:
        return False

def subscription_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=config.LINK_CHANNEL),
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub_callback(call):
    if check_subscription(call.from_user.id):
        bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

def check_shop_cooldown(user_id):
    cursor.execute('SELECT last_shop_time FROM cooldowns WHERE user_id = ?', (user_id,))
    cooldown_data = cursor.fetchone()
    
    if cooldown_data and cooldown_data[0]:
        if time.time() - cooldown_data[0] < 60:
            return int(60 - (time.time() - cooldown_data[0]))
    return 0

def buy_svat(user_id, chat_id):
    cursor.execute('UPDATE users SET score = score - 500 WHERE user_id = ?', (user_id,))
    conn.commit()
    
    target = random.choice(list(config.DOX_TABLE.keys()))
    msg = bot.send_message(chat_id, f"üîç –ü—Ä–æ–∏–∑–≤–æ–∂—É —Å–≤–∞—Ç –Ω–∞ {target}...")
    time.sleep(2)
    
    rand = random.random()
    cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
    current_score = cursor.fetchone()[0]
    
    if rand < 0.25:
        cursor.execute('UPDATE users SET score = score + 1000 WHERE user_id = ?', (user_id,))
        conn.commit()
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        new_score = cursor.fetchone()[0]
        bot.edit_message_text(
            f"‚úÖ –°–≤–∞—Ç —É–¥–∞–ª—Å—è! +1000 –æ—á–∫–æ–≤\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    elif rand < 0.95:
        bot.edit_message_text(
            f"‚ùå –°–≤–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è... -500 –æ—á–∫–æ–≤\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    else:
        cursor.execute('UPDATE users SET score = score - 100 WHERE user_id = ?', (user_id,))
        conn.commit()
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        new_score = cursor.fetchone()[0]
        bot.edit_message_text(
            f"üö® –í–∞—Å –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ–ª–∏—Ü–∏—è! -600 –æ—á–∫–æ–≤ (500+100)\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    
    cursor.execute('INSERT OR REPLACE INTO cooldowns (user_id, last_shop_time) VALUES (?, ?)', 
                  (user_id, time.time()))
    conn.commit()

def buy_def(user_id, chat_id):
    cursor.execute('SELECT purchased FROM defs WHERE user_id = ?', (user_id,))
    def_data = cursor.fetchone()
    
    if def_data and def_data[0] == 1:
        return "‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –¥–µ—Ñ–∞!"
    
    cursor.execute('UPDATE users SET score = score - 1000 WHERE user_id = ?', (user_id,))
    cursor.execute('INSERT OR REPLACE INTO defs (user_id, purchased) VALUES (?, 1)', (user_id,))
    cursor.execute('INSERT OR REPLACE INTO cooldowns (user_id, last_shop_time) VALUES (?, ?)', (user_id, time.time()))
    conn.commit()
    
    return "‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –¥–µ—Ñ–∞! –¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–¥–æ–∫—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã."

def buy_dox_all(user_id, chat_id):
    cursor.execute('UPDATE users SET score = score - 5000 WHERE user_id = ?', (user_id,))
    conn.commit()
    
    msg = bot.send_message(chat_id, "üåê –î–æ–∫—à—É –≤—Å–µ –∫–º...")
    time.sleep(2)
    
    rand = random.random()
    if rand < 0.2:
        cursor.execute('UPDATE users SET score = score + 7000 WHERE user_id = ?', (user_id,))
        conn.commit()
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        new_score = cursor.fetchone()[0]
        bot.edit_message_text(
            f"‚úÖ –î–æ–∫—Å –≤—Å–µ—Ö —É–¥–∞–ª—Å—è! +2000 –æ—á–∫–æ–≤ (7000-5000)\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    else:
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        current_score = cursor.fetchone()[0]
        bot.edit_message_text(
            f"‚ùå –î–æ–∫—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è... -5000 –æ—á–∫–æ–≤\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    
    cursor.execute('INSERT OR REPLACE INTO cooldowns (user_id, last_shop_time) VALUES (?, ?)', 
                  (user_id, time.time()))
    conn.commit()

def buy_door_fire(user_id, chat_id):
    cursor.execute('UPDATE users SET score = score - 1500 WHERE user_id = ?', (user_id,))
    conn.commit()
    
    target = random.choice(list(config.DOX_TABLE.keys()))
    msg = bot.send_message(chat_id, f"üî• –ü–æ–¥–∂–∏–≥–∞—é –¥–≤–µ—Ä—å {target}...")
    time.sleep(2)
    
    rand = random.random()
    if rand < 0.4:
        cursor.execute('UPDATE users SET score = score + 2000 WHERE user_id = ?', (user_id,))
        conn.commit()
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        new_score = cursor.fetchone()[0]
        bot.edit_message_text(
            f"‚úÖ –ü–æ–¥–∂–æ–≥ —É–¥–∞–ª—Å—è! +500 –æ—á–∫–æ–≤ (2000-1500)\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    else:
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        current_score = cursor.fetchone()[0]
        bot.edit_message_text(
            f"‚ùå –ü–æ–¥–∂–æ–≥ –Ω–µ —É–¥–∞–ª—Å—è... -1500 –æ—á–∫–æ–≤\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {current_score}",
            chat_id=chat_id,
            message_id=msg.message_id
        )
    
    cursor.execute('INSERT OR REPLACE INTO cooldowns (user_id, last_shop_time) VALUES (?, ?)', 
                  (user_id, time.time()))
    conn.commit()

@bot.message_handler(commands=['shop'])
def shop_command(message):
    user_id = message.from_user.id
    
    if not check_subscription(user_id):
        bot.reply_to(message, "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!",
                     reply_markup=subscription_keyboard())
        return
    
    cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
    score_data = cursor.fetchone()
    if not score_data:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
        
    score = score_data[0]
    cooldown = check_shop_cooldown(user_id)
    cooldown_text = f"\n‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏: {cooldown} —Å–µ–∫" if cooldown > 0 else ""
    
    text = f"üõí –ú–∞–≥–∞–∑–∏–Ω | üí∞ –ë–∞–ª–∞–Ω—Å: {score} –æ—á–∫–æ–≤{cooldown_text}\n\n"
    text += "1. –°–≤–∞—Ç ‚Äî 500 –æ—á–∫–æ–≤\n"
    text += "   - –®–∞–Ω—Å—ã: —É–¥–∞—á–∞ (25%), –Ω–µ—É–¥–∞—á–∞ (70%), –ø–æ–ª–∏—Ü–∏—è (5%)\n\n"
    text += "2. –î–µ—Ñ ‚Äî 1000 –æ—á–∫–æ–≤ (1 —Ä–∞–∑)\n"
    text += "   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–¥–æ–∫—Å–∏—Ç—å –∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã\n"
    text += "   - –®–∞–Ω—Å—ã: —É—Å–ø–µ—Ö (85%), –Ω–µ—É–¥–∞—á–∞ (14.5%), –ø—Ä–æ–ø–∞–∂–∞ (0.5%)\n\n"
    text += "3. –î–æ–∫—Å –≤—Å–µ—Ö ‚Äî 5000 –æ—á–∫–æ–≤\n"
    text += "   - –®–∞–Ω—Å—ã: —É–¥–∞—á–∞ (20% - +7000), –Ω–µ—É–¥–∞—á–∞ (80% - –ø–æ—Ç–µ—Ä—è 5000)\n\n"
    text += "4. –ü–æ–¥–∂–æ–≥ –¥–≤–µ—Ä–∏ ‚Äî 1500 –æ—á–∫–æ–≤\n"
    text += "   - –®–∞–Ω—Å—ã: —É–¥–∞—á–∞ (40% - +2000), –Ω–µ—É–¥–∞—á–∞ (60%)\n"
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("–°–≤–∞—Ç (500)", callback_data="shop_svat"),
        types.InlineKeyboardButton("–î–µ—Ñ (1000)", callback_data="shop_def")
    )
    keyboard.row(
        types.InlineKeyboardButton("–î–æ–∫—Å –≤—Å–µ—Ö (5000)", callback_data="shop_doxall"),
        types.InlineKeyboardButton("–ü–æ–¥–∂–æ–≥ –¥–≤–µ—Ä–∏ (1500)", callback_data="shop_fire")
    )
    
    bot.send_message(message.chat.id, text, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('shop_'))
def shop_callback(call):
    user_id = call.from_user.id
    action = call.data.split('_')[1]
    
    if not check_subscription(user_id):
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        return
    
    cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
    score_data = cursor.fetchone()
    if not score_data:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    score = score_data[0]
    cooldown = check_shop_cooldown(user_id)
    if cooldown > 0:
        bot.answer_callback_query(call.id, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {cooldown} —Å–µ–∫—É–Ω–¥!", show_alert=True)
        return
    
    if action == "svat":
        if score < 500:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!", show_alert=True)
            return
        bot.answer_callback_query(call.id, "‚úÖ –ö—É–ø–ª–µ–Ω–æ!")
        buy_svat(user_id, call.message.chat.id)
        
    elif action == "def":
        if score < 1000:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!", show_alert=True)
            return
        result = buy_def(user_id, call.message.chat.id)
        bot.answer_callback_query(call.id, result)
        
    elif action == "doxall":
        if score < 5000:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!", show_alert=True)
            return
        bot.answer_callback_query(call.id, "‚úÖ –ö—É–ø–ª–µ–Ω–æ!")
        buy_dox_all(user_id, call.message.chat.id)
        
    elif action == "fire":
        if score < 1500:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!", show_alert=True)
            return
        bot.answer_callback_query(call.id, "‚úÖ –ö—É–ø–ª–µ–Ω–æ!")
        buy_door_fire(user_id, call.message.chat.id)

@bot.message_handler(commands=['dox'])
def dox_command(message):
    user_id = message.from_user.id
    
    cursor.execute('SELECT banned FROM users WHERE user_id = ?', (user_id,))
    ban_data = cursor.fetchone()
    
    if ban_data is None:
        username = message.from_user.username
        full_name = message.from_user.full_name
        cursor.execute('INSERT INTO users (user_id, username, full_name) VALUES (?, ?, ?)', 
                      (user_id, username, full_name))
        conn.commit()
        cursor.execute('SELECT banned FROM users WHERE user_id = ?', (user_id,))
        ban_data = cursor.fetchone()
    
    if ban_data and ban_data[0] == 1:
        bot.reply_to(message, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
        return
    
    if not check_subscription(user_id):
        bot.reply_to(message, "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!",
                     reply_markup=subscription_keyboard())
        return
    
    cursor.execute('SELECT last_dox_time FROM cooldowns WHERE user_id = ?', (user_id,))
    cooldown_data = cursor.fetchone()
    cooldown_duration = 60
    
    if cooldown_data and cooldown_data[0]:
        last_time = cooldown_data[0]
        if time.time() - last_time < cooldown_duration:
            remaining = int(cooldown_duration - (time.time() - last_time))
            bot.reply_to(message, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–æ–∫—Å–æ–º!")
            return
    
    cursor.execute('INSERT OR REPLACE INTO cooldowns (user_id, last_dox_time) VALUES (?, ?)', 
                  (user_id, time.time()))
    conn.commit()
    
    rand = random.random()
    target = random.choice(list(config.DOX_TABLE.keys()))
    
    if rand < 0.05:
        event_type = random.choice(config.EASTER_EGGS)
        points = event_type["points"]
        cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))
        conn.commit()
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        new_score = cursor.fetchone()[0]
        response = f"{event_type['message']}\n+{points} –æ—á–∫–æ–≤!\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_score}"
    elif rand < 0.60:
        points = config.DOX_TABLE[target]
        cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))
        conn.commit()
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
        new_score = cursor.fetchone()[0]
        response = f"‚úÖ –î–æ–∫—Å —É–¥–∞–ª—Å—è! –í—ã –∑–∞–¥–æ–∫—Å–∏–ª–∏ {target}, +{points} –æ—á–∫–æ–≤!\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_score}"
    else:
        points = 0
        response = f"‚ùå –ó–∞–¥–æ–∫—Å–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, {target} —Å–ª–∏—à–∫–æ–º –∞–Ω–æ–Ω–∏–º–µ–Ω"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['top'])
def top_command(message):
    cursor.execute('SELECT username, score FROM users WHERE banned = 0 ORDER BY score DESC LIMIT 10')
    top_users = cursor.fetchall()
    
    if not top_users:
        bot.reply_to(message, "ü•∫ –¢–æ–ø –ø—É—Å—Ç!")
        return
    
    response = "üèÜ –¢–û–ü –î–û–ö–°–ï–†–û–í:\n\n"
    for i, (username, score) in enumerate(top_users, 1):
        if username:
            response += f"{i}. @{username}: {score} –æ—á–∫–æ–≤\n"
        else:
            response += f"{i}. [–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞]: {score} –æ—á–∫–æ–≤\n"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['profile'])
def profile_command(message):
    user_id = message.from_user.id
    
    cursor.execute('SELECT username, score FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
        
    username, score = user_data
    
    cursor.execute('SELECT purchased FROM defs WHERE user_id = ?', (user_id,))
    def_data = cursor.fetchone()
    def_status = "‚úÖ –ö—É–ø–ª–µ–Ω" if def_data and def_data[0] == 1 else "‚ùå –ù–µ –∫—É–ø–ª–µ–Ω"
    
    response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
    response += f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n" if username else "üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
    response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {score} –æ—á–∫–æ–≤\n"
    response += f"üïµÔ∏è‚Äç‚ôÇÔ∏è –î–µ—Ñ: {def_status}\n"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['info'])
def info_command(message):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö)
    cursor.execute('SELECT COUNT(*) FROM users WHERE banned = 0')
    active_users = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ñ–∞–º–∏
    cursor.execute('SELECT COUNT(*) FROM defs WHERE purchased = 1')
    def_users = cursor.fetchone()[0]
    
    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    response += f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
    response += f"üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ñ–∞–º–∏: {def_users}\n"
    response += f"üåê –¶–µ–ª–µ–π –¥–ª—è –¥–æ–∫—Å–∞: {len(config.DOX_TABLE)}\n"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/dox - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–¥–æ–∫—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/shop - –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π
/trans @—é–∑–µ—Ä —Å—É–º–º–∞ - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—á–∫–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
/info - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
/ban @—é–∑–µ—Ä - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban @—é–∑–µ—Ä - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/add @—é–∑–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['ban'])
def ban_command(message):
    user_id = message.from_user.id
    if user_id not in config.ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return
    
    if len(message.text.split()) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º!")
        return
    
    target = message.text.split()[1]
    if not target.startswith('@'):
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º!")
        return
    
    username = target[1:]
    cursor.execute('UPDATE users SET banned = 1 WHERE username = ?', (username,))
    conn.commit()
    
    if cursor.rowcount > 0:
        bot.reply_to(message, f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω!")
    else:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@bot.message_handler(commands=['unban'])
def unban_command(message):
    user_id = message.from_user.id
    if user_id not in config.ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return
    
    if len(message.text.split()) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º!")
        return
    
    target = message.text.split()[1]
    if not target.startswith('@'):
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º!")
        return
    
    username = target[1:]
    cursor.execute('UPDATE users SET banned = 0 WHERE username = ?', (username,))
    conn.commit()
    
    if cursor.rowcount > 0:
        bot.reply_to(message, f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
    else:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@bot.message_handler(commands=['add'])
def add_points_command(message):
    user_id = message.from_user.id
    if user_id not in config.ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 3:
            raise ValueError
        
        target_username = parts[1]
        if not target_username.startswith('@'):
            raise ValueError
        
        points = int(parts[2])
        if points <= 0:
            raise ValueError
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
        target_username = target_username[1:]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT user_id FROM users WHERE username = ?', (target_username,))
        target_data = cursor.fetchone()
        
        if not target_data:
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        target_id = target_data[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
        cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, target_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (target_id,))
        new_score = cursor.fetchone()[0]
        
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}\nüí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_score}")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add @—é–∑–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—á–∫–æ–≤")

@bot.message_handler(commands=['trans'])
def transfer_points_command(message):
    sender_id = message.from_user.id
    
    try:
        parts = message.text.split()
        if len(parts) < 3:
            raise ValueError

target_username = parts[1]
        if not target_username.startswith('@'):
            raise ValueError
        
        points = int(parts[2])
        if points <= 0:
            raise ValueError
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
        target_username = target_username[1:]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT user_id FROM users WHERE username = ?', (target_username,))
        target_data = cursor.fetchone()
        
        if not target_data:
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        target_id = target_data[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
        cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, target_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (target_id,))
        new_score = cursor.fetchone()[0]
        
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}\nüí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_score}")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add @—é–∑–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—á–∫–æ–≤")

@bot.message_handler(commands=['trans'])
def transfer_points_command(message):
    sender_id = message.from_user.id
    
    try:
        parts = message.text.split()
        if len(parts) < 3:
            raise ValueError
        
        target_username = parts[1]
        if not target_username.startswith('@'):
            raise ValueError

        points = int(parts[2])
        if points <= 0:
            raise ValueError
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username
        target_username = target_username[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–∞–º —Å–µ–±–µ
        cursor.execute('SELECT username FROM users WHERE user_id = ?', (sender_id,))
        sender_username = cursor.fetchone()[0]
        if sender_username == target_username:
            bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –æ—á–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (sender_id,))
        sender_balance = cursor.fetchone()[0]
        
        if sender_balance < points:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance}")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        cursor.execute('SELECT user_id FROM users WHERE username = ?', (target_username,))
        target_data = cursor.fetchone()
        
        if not target_data:
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        target_id = target_data[0]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        cursor.execute('UPDATE users SET score = score - ? WHERE user_id = ?', (points, sender_id))
        cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, target_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (sender_id,))
        new_sender_balance = cursor.fetchone()[0]
        
        cursor.execute('SELECT score FROM users WHERE user_id = ?', (target_id,))
        new_target_balance = cursor.fetchone()[0]
        
        bot.reply_to(message, 
                    f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥!\n"
                    f"üì§ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ @{target_username} {points} –æ—á–∫–æ–≤\n"
                    f"üí≥ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_sender_balance}\n"
                    f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {new_target_balance}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                target_id,
                f"üí∏ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {points} –æ—á–∫–æ–≤ –æ—Ç @{sender_username}\n"
                f"üí≥ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_target_balance}"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /trans @—é–∑–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—á–∫–æ–≤")

def def_actions():
    while True:
        try:
            cursor.execute('SELECT user_id FROM defs WHERE purchased = 1')
            def_users = cursor.fetchall()
            
            for (user_id,) in def_users:
                try:
                    cursor.execute('SELECT banned FROM users WHERE user_id = ?', (user_id,))
                    if cursor.fetchone()[0] == 1:
                        continue
                    
                    cursor.execute('SELECT last_def_time FROM defs WHERE user_id = ?', (user_id,))
                    def_data = cursor.fetchone()
                    
                    current_time = time.time()
                    last_def_time = def_data[0] if def_data and def_data[0] else 0
                    
                    # –ö–î 1.5 –º–∏–Ω—É—Ç—ã (90 —Å–µ–∫—É–Ω–¥)
                    if current_time - last_def_time >= 90:
                        target = random.choice(list(config.DOX_TABLE.keys()))
                        points = config.DOX_TABLE[target]
                        
                        rand = random.random()
                        if rand < 0.85:  # 85% —É—Å–ø–µ—Ö
                            cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))
                            try:
                                bot.send_message(
                                    user_id, 
                                    f"üïµÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à –¥–µ—Ñ –∑–∞–¥–æ–∫—Å–∏–ª {target} –∏ –ø—Ä–∏–Ω–µ—Å –≤–∞–º {points} –æ—á–∫–æ–≤!"
                                )
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        elif rand < 0.995:  # 14.5% –Ω–µ—É–¥–∞—á–∞ (85% + 14.5% = 99.5%)
                            try:
                                bot.send_message(
                                    user_id, 
                                    f"üïµÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à –¥–µ—Ñ –ø—ã—Ç–∞–ª—Å—è –∑–∞–¥–æ–∫—Å–∏—Ç—å {target}, –Ω–æ –Ω–µ —Å–º–æ–≥."
                                )
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        else:  # 0.5% –ø—Ä–æ–ø–∞–∂–∞ –¥–µ—Ñ–∞
                            cursor.execute('DELETE FROM defs WHERE user_id = ?', (user_id,))
                            try:
                                bot.send_message(
                                    user_id, 
                                    "üí• –í–∞—à –¥–µ—Ñ –±—ã–ª —Ä–∞—Å–∫—Ä—ã—Ç –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω! –ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤–æ–≥–æ."
                                )
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–∞
                        
                        cursor.execute('UPDATE defs SET last_def_time = ? WHERE user_id = ?', (current_time, user_id))
                        conn.commit()
                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    conn.rollback()
            
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ def_actions: {e}")
            time.sleep(60)

if __name__ == "__main__":
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É cooldowns –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    cursor.execute('DROP TABLE IF EXISTS cooldowns')
    cursor.execute('''CREATE TABLE cooldowns (
                    user_id INTEGER PRIMARY KEY,
                    last_dox_time REAL DEFAULT 0,
                    last_shop_time REAL DEFAULT 0
                  )''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É last_def_time –≤ —Ç–∞–±–ª–∏—Ü—É defs
    try:
        cursor.execute('ALTER TABLE defs ADD COLUMN last_def_time REAL DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    conn.commit()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    bot.set_my_commands(
        commands=[
            telebot.types.BotCommand("dox", "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–¥–æ–∫—Å–∏—Ç—å"),
            telebot.types.BotCommand("top", "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
            telebot.types.BotCommand("profile", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
            telebot.types.BotCommand("shop", "–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π"),
            telebot.types.BotCommand("trans", "–ü–µ—Ä–µ–≤–æ–¥ –æ—á–∫–æ–≤"),
            telebot.types.BotCommand("info", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
            telebot.types.BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            telebot.types.BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        ],
        scope=telebot.types.BotCommandScopeAllPrivateChats()
    )
    
    bot.set_my_commands(
        commands=[
            telebot.types.BotCommand("dox", "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–¥–æ–∫—Å–∏—Ç—å"),
            telebot.types.BotCommand("top", "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
            telebot.types.BotCommand("profile", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
            telebot.types.BotCommand("shop", "–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π"),
            telebot.types.BotCommand("trans", "–ü–µ—Ä–µ–≤–æ–¥ –æ—á–∫–æ–≤"),
            telebot.types.BotCommand("info", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
            telebot.types.BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        ],
        scope=telebot.types.BotCommandScopeAllGroupChats()
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–µ—Ñ–∞
    def_thread = threading.Thread(target=def_actions, daemon=True)
    def_thread.start()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    bot.infinity_polling()
